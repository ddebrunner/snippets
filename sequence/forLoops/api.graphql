# A sequence is not exactly linear
# If at any stage, it produces N records, then the next stage is called once for every record
# In the following, a Customer has a list of order ids in the field orderList
# We will use materializer to generate the order details for each of the ids in the list
# We do that by using sequence
# The first query in the sequence echoes back the id list (basically a no-op, but it helps drive the next stage)
# The second query gets order details for each of these ids
# We also have fun stuff in 1+N optimization, but that is subject to other snippets
type Customer {
    name: String
    city: String
    orderList: [ID]
}
type Order {
    id: ID
    product: ID
}
type Query {
    # An ecmascript generator of customer data
    # Of course, in real life you will call an API or a database
    customer (id: ID): Customer
    @rest (endpoint: "stepzen:empty"
            ecmascript: """
            function transformREST(s) {
                var id = get('id')
                if (id==1)
                    return (JSON.stringify({"name":"John Doe","city":"Miami", "orderList":[1,3]}))
                else
                    return (JSON.stringify({"name":"Jane Smith","city":"Santa Clara", "orderList":[2,4]}))
            }
            """
    )
    # An ecmascript generator of order data
    # Of course, in real life you will call an API or a database
    orderDetail(id: ID): Order
    @rest (endpoint: "stepzen:empty"
            ecmascript: """
            function transformREST(s) {
                var id = get('id')
                return (JSON.stringify({"id":id, "product":id+10}))
            }
            """
    )
    # This is a sequence. The first query in the sequence is just an echo, generating a for loop
    # The second query gets called for each entry in the for loop
    # Over time, we will be providing more controls, but this should suffice for now
    allOrders(ids: [ID]): [Order]
    @sequence (steps:[{query: "echo"}, {query: "orderDetail"}])

    # This is simply an echo
    echo(ids:[ID]):[ID]
    @rest (endpoint: "stepzen:empty"
            ecmascript: """
            function transformREST(s){
                var ids = get('ids')
                return ids
            }
            """
            )
}

# Now that we have a query that can generate order details for all order ids in the list,
# we can use an @materializer to connect Order to Customer
# We need to map the argument, as shown below
extend type Customer {
    orderDetails: [Order]
    @materializer (query: "allOrders", arguments:[{name:"ids", field:"orderList"}])
}

